generator client {
  provider = "prisma-client-js"
  output   = "./src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth
model User {
  id            String     @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  role          Role       @default(USER)
  sessions      Session[]
  accounts      Account[]
  addresses     Address[]
  orders        Order[]
  wishlists     Wishlist[]
  reviews       Review[]
  cart          Cart[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// User
model Address {
  id         Int     @id @default(autoincrement())
  userId     String
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  line1      String
  line2      String?
  city       String
  state      String
  postalCode String
  country    String
  isDefault  Boolean @default(false)
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId  String
  qty        Int
  totalPrice Int
  status     OrderStatus
  payment    Payment[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Payment {
  id            String        @id @default(cuid())
  orderId       Int
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  amount        Int
  provider      String // e.g., Razorpay, Stripe
  status        PaymentStatus
  transactionId String?
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  location  String
  quote     String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int    @id @default(autoincrement())
  cartId    Int
  cart      Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int
}

// Store
model Category {
  id        Int       @id @default(autoincrement())
  name      String
  slug      String    @unique
  desc      String
  image     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id            String          @id @default(cuid())
  name          String
  categoryId    Int
  category      Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  originalPrice Int
  discountPrice Int
  discount      Int
  images        ProductImages[]
  inStock       Boolean         @default(true)
  rating        Int
  reviewCount   Int
  isBestseller  Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model ProductImages {
  id        Int     @id @default(autoincrement())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  image     String
}

enum OrderStatus {
  CONFIRMED
  SHIPPED
  ARRIVING
  ARRIVED
}

enum PaymentStatus {
  PENDING
  FAILED
  PAID
}

enum Role {
  USER
  ADMIN
}
